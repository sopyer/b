<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Mykhailo&#39;s blog</title>
    <link>https://sopyer.github.io/b/post/</link>
    <description>Recent content in Posts on Mykhailo&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2017-...</copyright>
    <lastBuildDate>Thu, 14 Feb 2019 14:00:00 +0200</lastBuildDate>
    
	<atom:link href="https://sopyer.github.io/b/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Plotting Functions, Equations, Shapes and Combinations of Them using Shadertoy</title>
      <link>https://sopyer.github.io/b/post/plotting-functions-and-equations-shapes/</link>
      <pubDate>Thu, 14 Feb 2019 14:00:00 +0200</pubDate>
      
      <guid>https://sopyer.github.io/b/post/plotting-functions-and-equations-shapes/</guid>
      <description>UPDATE: added automatic differentiation via dual numbers section
 In computer graphics plotting functions is invaluable tool in order to understand any topic. There are a lot of specialized software, but nothing that can visualize 2d, 3d and custom content easily. One of the greatest tools for visualization is Shadertoy. So my goal was to develop tools to be able to generate all kinds of plots.
Plotting shapes is quite straightforward just evaluate $F(x) &amp;gt;= 0$ and you are done.</description>
    </item>
    
    <item>
      <title>Dealing with geometry in Vulkan</title>
      <link>https://sopyer.github.io/b/post/static-dynamic-geometry-vulkan/</link>
      <pubDate>Tue, 10 Oct 2017 20:15:12 +0300</pubDate>
      
      <guid>https://sopyer.github.io/b/post/static-dynamic-geometry-vulkan/</guid>
      <description>In this blog post I decided to deal with rendering geometry in Vulkan. Depending on usage usually people talk about dynamic and static geometry. Dynamic is geometry which changes every frame or alternatively is uploaded every frame, static - respectively is constant across large number of frames. My goal is to learn how to deal with both in Vulkan. Entire source code can be found in these 2 commits: dynamic geometry and static geometry handling.</description>
    </item>
    
    <item>
      <title>Vulkan Shader Sample</title>
      <link>https://sopyer.github.io/b/post/vulkan-shader-sample/</link>
      <pubDate>Tue, 19 Sep 2017 20:57:38 +0300</pubDate>
      
      <guid>https://sopyer.github.io/b/post/vulkan-shader-sample/</guid>
      <description>In previous blog post I presented simple Vulkan program, which was mostly initialization/deinitialization sequences. I replaced rendering with simple clear. In this blog post I&amp;rsquo;ll explain how to do actual rendering. I thought that simple triangle will be too boring, so instead I decided to illustrate shaders with primitive raytracing example from ShaderToy. Here is video which shows what we will achieve:   But first I want to list few interesting Vulkan articles, which I encountered since last time:</description>
    </item>
    
    <item>
      <title>Minimal Vulkan Sample: Clearing of Backbuffer</title>
      <link>https://sopyer.github.io/b/post/minimal-vulkan-sample/</link>
      <pubDate>Sat, 12 Aug 2017 12:00:00 +0300</pubDate>
      
      <guid>https://sopyer.github.io/b/post/minimal-vulkan-sample/</guid>
      <description>For a long time I wanted to start learning new low-level API like DirectX and Vulkan. And I procrastinated, as my current job is barely related to rendering and there is little interest in high performance code and high performance rendering specifically. Recently I decided instead of just writing code myself to document my learning exercises in hope that they will be useful to other people. As a side effect I hope it will help with my motivation.</description>
    </item>
    
  </channel>
</rss>